#!/usr/bin/env python3

import time
import os
import sys
import argparse

import math
import numpy

import util

class Program:
	_args = None

	def __init__(self):
		parser = argparse.ArgumentParser(
			description="Guest model.")
		parser.add_argument('-d', '--stats-dir', type=str,
			default='/host', required=True,
			help='directory of statistics provided by the host')
		self._args = parser.parse_args()
		#print(self._args)

	def main(self):
		try:
			if not os.path.isdir(self._args.stats_dir): raise Exception('parameter --stats-dir="{}" not found a directory'.format(self._args.stats_dir))

			host_stats = util.WatchLog('{}/stats-1'.format(self._args.stats_dir), 'json')

			#model1m   = Model('model-1m',  60)
			model5m   = Model('model-5m',  300)
			#model10m  = Model('model-10m', 600)

			while True:
				time.sleep(1)

				lines = host_stats.read()
				for l in lines:
					#model1m.feed(l)
					model5m.feed(l)
					#model10m.feed(l)

				#model1m.printResults()
				model5m.printResults()
				#model10m.printResults()

		# Exit conditions:
		except KeyboardInterrupt:
			return 0
		'''except Exception as e:
			sys.stderr.write('error: {}\n'.format(str(e)))
			return 1  #'''
		return 0

class Model:
	# Statistics origin
	_prefix        = None
	_file_name     = None
	_sample_limit  = 0
	# Hardware information
	_cpus          = None
	_cpu_list      = None
	# Time Serie Values:
	_sample_size   = 0
	_total_usage   = []   # cpu time (normalized by cpus)
	_total_demand  = []
	_other_demand  = None # cpu time + steal time of all VMs (Markov Chain) (normalized by total_vcpus)
	_total_vcpus   = []   # number of VCPUs of all VMs
	_guest_vcpus   = None
	_guest_usage   = []
	_guest_steal   = []

	def __init__(self, prefix, sample_limit):
		assert sample_limit >= 0
		self._prefix       = prefix
		self._sample_limit = sample_limit
		self._other_demand = MarkovChain(11, sample_limit=sample_limit) # 0-10 states

	def feed(self, line):
		self._sample_size += 1
		if self._cpus == None:
			self._cpu_list = []
			cpumap = line['vm_totals']['map']
			self._cpus = cpumap.count(True)
			for i in range(0, len(cpumap)):
				if cpumap[i] == True: self._cpu_list.append(i)
		if self._guest_vcpus == None:
			self._guest_vcpus = line['vm']['vcpu_count']

		total_vcpus = line['vm_totals']['vcpu_count']
		total_usage = sum([ line['cpu'][i]['guest'] for i in self._cpu_list ]) / 100.
		total_demand = total_usage + ( line['vm_totals']['steal'] / 100. )

		guest_usage = sum([ i['usage'] for i in line['vm']['vcpu'] ]) / 100.
		guest_steal = sum([ i['steal'] for i in line['vm']['vcpu'] ]) / 100.

		other_demand = total_demand - guest_usage - guest_steal
		other_vcpus = total_vcpus - self._guest_vcpus

		other_demand_normalized = int(round(10* other_demand / other_vcpus, 0)) if other_vcpus > 0 and other_demand >= 0 else 0
		if other_demand_normalized > 10: other_demand_normalized = 10

		#print('other_demand={}, other_demand_normalized={}'.format(other_demand, other_demand_normalized))

		self._total_usage.append( total_usage / self._cpus ) # normalized by the number of CPUs
		self._total_vcpus.append( total_vcpus )
		self._total_demand.append( total_demand )

		self._guest_usage.append( guest_usage )
		self._guest_steal.append( guest_steal )

		self._other_demand.increment( other_demand_normalized )

		if self._sample_limit > 0:
			while self._sample_size > self._sample_limit:
				self._sample_size -= 1
				self._total_usage.pop(0)
				self._total_vcpus.pop(0)
				self._total_demand.pop(0)
				self._guest_usage.pop(0)
				self._guest_steal.pop(0)

	def printResults(self):
		histogram = self._other_demand.histogram()
		markov = self._other_demand.predictNext()
		print()
		print( '{}: Total usage       : {:.3f}%'.format(self._prefix, self._cpus * self._total_usage[-1] ))
		print( '{}: Total demand      : {:.3f}%'.format(self._prefix, self._total_demand[-1] ))
		print( '{}: Minimum CPU times : {}'.format(self._prefix, self.predictMinimum() ))
		print( '{}:                   : {}'.format(self._prefix, [ '{:^5}'.format(i) for i in range(0,11) ]) )
		print( '{}: Histogram         : {}'.format(self._prefix, [ '{:.3f}'.format(i) for i in histogram ]) )
		print( '{}: Markov Chain      : {}'.format(self._prefix, [ '{:.3f}'.format(i) for i in markov ]) )
		print( '{}: Prediction Hist   : {}'.format(self._prefix, [ '{:.3f}'.format(i) for i in self.predictCum(histogram) ]) )
		print( '{}: Prediction Markov : {}'.format(self._prefix, [ '{:.3f}'.format(i) for i in self.predictCum(markov) ]) )

	def predictMinimum(self):
		vcpus = self._total_vcpus[-1]
		if self._cpus >= vcpus: return [(1,1), (1,1)]

		r = float(vcpus % self._cpus) / self._cpus

		return [(1 / math.ceil(vcpus / self._cpus), r), (1 / math.floor(vcpus / self._cpus), 1-r)]

	def predictCum(self, model):
		prediction = [0. for i in range(0,11)]

		guest_vcpus = self._guest_vcpus
		delta_vcpus = self._total_vcpus[-1] - guest_vcpus
		#print('delta_vcpus={}'.format(delta_vcpus))

		for o in range(0,11):
			potential_usage = int(round(10 * float(self._cpus) / float(o*delta_vcpus/10. + guest_vcpus), 0))
			#print('o={}, potential_usage={}, probability={}, demand={}'.format(o, potential_usage, model[o], float(o*delta_vcpus + guest_vcpus)))
			if potential_usage > 10: potential_usage = 10
			prediction[potential_usage] += model[o]

		#print( '{}: Prediction Array  : {}'.format(self._prefix, [ '{:.3f}'.format(i) for i in prediction ]) )
		for i in range(9,-1,-1):
			prediction[i] += prediction[i+1]
		return prediction

class MarkovChain:
	_size          = None # Matrix size
	_names         = None # State names
	_counts        = None # Line sum
	_matrix        = None # Transition matrix
	_sample_limit  = 0
	_sample_size   = 0
	_sample        = []
	_last_state    = None

	def __init__(self, size, names=None, sample_limit=0):
		assert isinstance(size, int) and size > 1
		assert names == None or (isinstance(names, list) and len(names) == size)
		assert isinstance(sample_limit, int) and sample_limit >= 0
		self._size = size
		self._names = names
		self._sample_limit = sample_limit
		self._counts = [ 0 for i in range(0,size) ]
		self._matrix = numpy.array( [ [ 0 for j in range(0,size) ] for i in range(0,size) ] )

	def getMatrix(self):
		ret = numpy.array( [ [ 0. for j in range(0,self._size) ] for i in range(0,self._size) ] )
		for i in range(0,self._size):
			ret[i] = self._matrix[i]/self._counts[i] if self._counts[i] > 0 else [1./self._size for j in range(0,self._size)]
		return ret

	def predict(self, states, times=1):
		assert len(states) == self._size
		assert times > 0
		m = self.getMatrix()
		#print(m)
		ret = states.copy()
		for i in range(0,times):
			ret = ret @ m
		return ret

	def predictNext(self):
		if self._last_state != None:
			states = numpy.array([ (1 if i == self._last_state else 0) for i in range(0,self._size) ])
			return self.predict(states)
		return None

	def histogram(self):
		ret = numpy.array(self._counts, float)
		return ret / self._sample_size

	def increment(self, states):
		if isinstance(states, int):
			state_from = self._last_state
			state_to = states
		elif isinstance(states, tuple):
			state_from, state_to = states
		else: raise Exception('wrong parameter states')

		assert state_from == None or (state_from >=0 and state_from < self._size)
		assert state_to >= 0 and state_to < self._size

		if state_from != None:
			self._counts[state_from] += 1
			self._matrix[state_from][state_to] += 1
			self._sample_size += 1
			self._sample.append((state_from, state_to))

		self._last_state = state_to

		if self._sample_limit > 0:
			while self._sample_size > self._sample_limit:
				self.decrement()

	def decrement(self):
		if self._sample_size > 0:
			state_from, state_to = self._sample.pop(0)
			self._sample_size -= 1

			if self._counts[state_from] <= 0 or self._matrix[state_from][state_to] <= 0:
				self.debugData()
				raise Exception('decrement error in the class MarkovChain: self._counts[{f}] = {c} or self._matrix[{f}][{t}] = {m}'.format(f=state_from, t=state_to, c=self._counts[state_from], m=self._matrix[state_from][state_to]))

			self._counts[state_from] -= 1
			self._matrix[state_from][state_to] -= 1

	def size(self):
		return self._size

	def debugData(self):
		print('Sample Size       : {}'.format(self._sample_size))
		print('Counts            : {}'.format(self._counts))
		print('Transition Matrix : \n{}'.format(self._matrix))

if __name__ == '__main__':
	exit(Program().main())
