#!/usr/bin/env python3

import argparse
import os
import sys
import time
import random
import subprocess
import numpy

class LoadControl:
	_options = None
	_vms  = [ 'test-load{}'.format(i) for i in range(1,10) ]
	_load = [
			#(       0, 'test-load1', -1  ),
		]

	def __init__(self):
		parser = argparse.ArgumentParser(
			description="Control de load of each VM.")
		parser.add_argument('-e', '--export-dir', type=str,
			default=None, required=True,
			help='directory used to export information to the guests')
		parser.add_argument('-s', '--set', type=float,
			default=None,
			help='set all guests to the same value')
		parser.add_argument('-v', '--vms', type=int,
			default=None, required=True,
			help='number of VMs to control')
		parser.add_argument('-p', '--print',
			default=False, action='store_true',
			help='print the load plan and exit')
		parser.add_argument('-r', '--reenter',
			default=False, action='store_true',
			help='periodically stops and starts the load of the first VM')
		parser.add_argument('-P', '--postcommand',
			default=None,
			help='command executed after the experiment')
		self._options = parser.parse_args()

	def main(self):
		options = self._options

		try:
			assert os.path.isdir(options.export_dir), 'export-dir="{}" not found'.format(options.export_dir)
			assert options.vms >= 1 and options.vms <= len(self._vms), 'the parameter -v/--vms must be between 1 and {}'.format(len(self._vms))

			if options.set != None:
				for i in range(0,options.vms):
					self.writeSleep(self._vms[i], options.set)
				return 0

			self._buildLoad(options.vms)
			load    = self._load

			if options.print:
				for i in load:
					print(i)
				return 0

			count = 0
			while len(load) > 0:
				while len(load) > 0 and load[0][0] <= count:
					l = load.pop(0)
					self.writeSleep(l[1], l[2])

				count += 1
				time.sleep(1)

			if options.postcommand is not None:
				subprocess.getstatusoutput(options.postcommand)

		except KeyboardInterrupt:
			pass
		except AssertionError as e:
			sys.stderr.write('error: {}\n'.format(str(e)))
			return 1

		return 0

	def writeSleep(self, vm_name, value):
		print('setting VM {} to {}'.format(vm_name, value))
		f = open('{}/{}/sleep'.format(self._options.export_dir, vm_name), 'w')
		f.write(str(value))
		f.close()

	def _buildLoad(self, vms):
		interval = 7
		shuffles = vms + 2
		phases = [ .8, .6, .5, .4, .3, .2, .1, .05, 0. ]
		load = self._load

		time = 5
		other_vms = [-1 for i in range(1,vms)]
		load.append((time, self._vms[0], 0.0))
		for ph in phases:
			for o in range(0, len(other_vms)):
				other_vms[o] = ph
				aux = other_vms[:]
				for i in range(0,shuffles):
					time += interval
					random.shuffle(aux)
					#print(aux)
					for o2 in range(0, len(other_vms)):
						load.append((time, self._vms[o2+1], aux[o2]))
					if self._options.reenter:
						if i == int(shuffles/2):
							time += 1
							load.append((time, self._vms[0], -1))
							time += 2
							load.append((time, self._vms[0], 0))

		time += 30
		for i in range(0,vms):
			load.append((time, self._vms[i], -1))

if __name__ == '__main__':
	exit(LoadControl().main())
