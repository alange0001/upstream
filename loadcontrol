#!/usr/bin/env python3

import argparse
import os
import sys
import time

class LoadControl:
	_options = None
	_vms  = [ 'test-load{}'.format(i) for i in range(1,6) ]
	_load = [
			(       5, 'test-load1',  0.0),
			(      10, 'test-load2',  0.8),
			(      10, 'test-load3',  0.8),
			(      30, 'test-load4',  0.8),
			(      30, 'test-load5',  0.8),
			( 1*60+00, 'test-load2',  0.4),
			( 1*60+00, 'test-load3',  0.4),
			( 1*60+30, 'test-load4',  0.4),
			( 1*60+30, 'test-load5',  0.4),
			( 2*60+00, 'test-load2',  0.2),
			( 2*60+00, 'test-load3',  0.2),
			( 2*60+30, 'test-load4',  0.2),
			( 2*60+30, 'test-load5',  0.2),
			( 3*60+00, 'test-load2',  0.1),
			( 3*60+00, 'test-load3',  0.1),
			( 3*60+30, 'test-load4',  0.1),
			( 3*60+30, 'test-load5',  0.1),
			( 4*60+00, 'test-load2',  0.0),
			( 4*60+00, 'test-load3',  0.0),
			( 4*60+30, 'test-load4',  0.0),
			( 4*60+30, 'test-load5',  0.0),
			( 5*60+00, 'test-load2', -1  ),
			( 5*60+00, 'test-load3',  0.1),
			( 5*60+30, 'test-load4',  0.1),
			( 5*60+30, 'test-load5',  0.1),
			( 6*60+00, 'test-load2',  0.1),
			( 6*60+00, 'test-load3',  0.8),
			( 6*60+30, 'test-load4',  0.0),
			( 6*60+30, 'test-load5',  0.1),
			(       0, 'test-load1', -1  ),
			(       0, 'test-load2', -1  ),
			(       0, 'test-load3', -1  ),
			(       0, 'test-load4', -1  ),
			(       0, 'test-load5', -1  ),
		]

	def __init__(self):
		parser = argparse.ArgumentParser(
			description="Control de load of each VM.")
		parser.add_argument('-e', '--export-dir', type=str,
			default=None,
			help='directory used to export information to the guests')
		parser.add_argument('-s', '--set', type=float,
			default=None,
			help='set all guests to the same value')
		self._options = parser.parse_args()
		assert os.path.isdir(self._options.export_dir), 'export-dir="{}" not found'.format(self._options.export_dir)

	def main(self):
		options = self._options
		load    = self._load

		try:
			if options.set != None:
				for i in self._vms:
					self.writeSleep(i, options.set)
				return 0

			count = 0
			while len(load) > 0:
				while len(load) > 0 and load[0][0] <= count:
					l = load.pop(0)
					self.writeSleep(l[1], l[2])

				count += 1
				time.sleep(1)

		except KeyboardInterrupt:
			pass

		return 0

	def writeSleep(self, vm_name, value):
		print('setting VM {} to {}'.format(vm_name, value))
		f = open('{}/{}/sleep'.format(self._options.export_dir, vm_name), 'w')
		f.write(str(value))
		f.close()

if __name__ == '__main__':
	exit(LoadControl().main())
