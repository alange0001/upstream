#!/usr/bin/env python3

import psutil
import datetime
import collections
import time
import argparse
import json
import os
# libvirt module (imported only with --host)
libvirt = None

def main():
	global libvirt

	parser = argparse.ArgumentParser(
		description="Get system's performance information.")
	parser.add_argument('-i', '--interval', type=int,
		default=None,
		help='interval')
	parser.add_argument('--host',
		default=False, action='store_true',
		help='is a host machine (VMM)')
	parser.add_argument('-f', '--fields', type=str,
		default=None, nargs='+',
		help='list of fields to show')
	args = parser.parse_args()
	#print(args)
	if args.interval == None or args.interval <= 0:
		args.interval = 1

	if args.host:
		import libvirt as _libvirt
		libvirt = _libvirt

	st = Stat(args)
	st.getData()
	while True:
		time.sleep(args.interval)
		print(st.getLine())

	return 0

class Stat:
	# Class control
	fields  = None
	is_host = False
	# Format control
	'''columns = None
	format_line = None'''
	# System's information
	cpus = None
	libvirt_conn = None
	# Last time
	last_time = None
	# Last cpu stats
	last_host_stats = None
	last_vms_stats = None

	def __init__(self, args):
		self.cpus = psutil.cpu_count()
		if isinstance(args.fields, list) and len(args.fields) > 0: self.fields = args.fields
		self.is_host = args.host
		if self.is_host:
			self.libvirt_conn = libvirt.open('qemu:///system')

	__findCpuacctVM_cache = dict()
	def findCpuacctVM(self, vm_name):
		vm_path = self.__findCpuacctVM_cache.get(vm_name)
		if vm_path != None and os.path.isdir(vm_path):
			return vm_path

		basedir = '/sys/fs/cgroup/cpu,cpuacct/machine'
		dirs = [d for d in os.listdir(basedir) if os.path.isdir('{}/{}'.format(basedir,d)) and d.find('{}.libvirt-qemu'.format(vm_name)) != -1]
		if len(dirs) == 1:
			vm_path = '{}/{}'.format(basedir, dirs[0])
			self.__findCpuacctVM_cache['vm_name'] = vm_path
			return vm_path
		else:
			raise Exception("cpuacct directory of VM not found")

	def getCpuacct(self, vm_name=None, vcpus=None):
		ret = []
		vm_dir = self.findCpuacctVM(vm_name)

		for i in range(0,vcpus):
			ret_vcpu = collections.OrderedDict()
			ret.append(ret_vcpu)
			ret_vcpu['total'] = self.readFile('{}/vcpu{}/cpuacct.usage'.format(vm_dir, i)).replace('\n','')
			ret_vcpu['percpu'] = self.readFile('{}/vcpu{}/cpuacct.usage_percpu'.format(vm_dir, i)).replace('\n', '').split(' ')[0:self.cpus]

		return ret

	def getProc(self, vm_name, vcpus):
		vm_acct_dir = self.findCpuacctVM(vm_name)
		ret = collections.OrderedDict()
		ret['stat']  = ret_stat  = []
		ret['sched'] = ret_sched = []
		for i in range(0,vcpus):
			# Getting vCPU thread ID:
			threadId = self.readFile('{}/vcpu{}/tasks'.format(vm_acct_dir, i)).replace('\n', '')
			stat = self.readFile('/proc/{}/stat'.format(threadId)).replace('\n', '').split(' ')
			sched = self.readFile('/proc/{}/schedstat'.format(threadId)).replace('\n', '').split(' ')
			ret_stat.append(stat)
			ret_sched.append(sched)
		return ret

	def getData(self):
		### Collecting stats: ###
		cur_time      = time.time()
		percent       = psutil.cpu_percent(percpu=True)
		times_percent = psutil.cpu_times_percent(percpu=True)
		freq          = psutil.cpu_freq(percpu=True)
		if len(freq) == 0: freq = None

		if self.is_host:
			host_stats = collections.OrderedDict()
			host_stats['libvirt'] = []
			for i in range(0,self.cpus):
				host_stats['libvirt'].append(self.libvirt_conn.getCPUStats(i))
			host_stats['cpuacct'] = self.readFile('/sys/fs/cgroup/cpu,cpuacct/cpuacct.usage_percpu').replace('\n', '').split(' ')[0:self.cpus]

			vms_stats = collections.OrderedDict()
			domains = self.libvirt_conn.listAllDomains()
			for dom in domains:
				if dom.isActive() == 0: continue
				name = dom.name()
				vcpus = dom.vcpus()
				vms_stats[name] = vm = collections.OrderedDict()
				vm['vcpu_count']     = len(vcpus[0])
				vm['vcpus']          = vcpus
				vm['cpuacct']        = self.getCpuacct(name, vm['vcpu_count'])
				vm['proc']           = self.getProc(name, vm['vcpu_count'])

		### Organizing output: ###
		data = collections.OrderedDict()
		data['time'] = datetime.datetime.now().strftime('%s')
		data['cpu_count'] = self.cpus
		data['cpu'] = []
		for i in range(0,self.cpus):
			#times_percent_i = times_percent[i]
			data_cpu        = collections.OrderedDict()
			data['cpu'].append(data_cpu)
			data_cpu['percent']        = percent[i]
			#data_cpu['user']          = times_percent_i.user
			#data_cpu['nice']          = times_percent_i.nice
			#data_cpu['system']        = times_percent_i.system
			#data_cpu['idle']          = times_percent_i.idle
			#data_cpu['iowait']        = times_percent_i.iowait
			#data_cpu['irq']           = times_percent_i.irq
			#data_cpu['softirq']       = times_percent_i.softirq
			#data_cpu['steal']         = times_percent_i.steal
			#data_cpu['guest']         = times_percent_i.guest
			#data_cpu['guest_nice']    = times_percent_i.guest_nice
			if freq != None:
				freq_i = freq[i]
				data_cpu['freq_current'] = freq_i.current
				data_cpu['freq_min']     = freq_i.min
				data_cpu['freq_max']     = freq_i.max

		if self.is_host:
			#data['host_stats']  = host_stats
			#data['vms_stats']   = vms_stats

			if self.last_host_stats != None:
				data['elapsed_time'] = (cur_time - self.last_time)
				data['vm'] = collections.OrderedDict()
				for vm_name, vm in vms_stats.items():
					vm_old = self.last_vms_stats.get(vm_name)

					data['vm'][vm_name] = vm_data = collections.OrderedDict()
					vm_data['vcpu_count'] = vm['vcpu_count']
					vm_data['vcpus'] = []

					for i in range(0,vm['vcpu_count']):
						vm_vcpu = collections.OrderedDict()
						vm_data['vcpus'].append(vm_vcpu)
						vm_vcpu['map']   = vm['vcpus'][1][i]
						#wrong
						if vm_old != None:
							vm_vcpu['usage'] = round(
								(int(vm['cpuacct'][i]['total']) - int(vm_old['cpuacct'][i]['total'])) /
								((cur_time - self.last_time) * 10000000)
								, 2)
							vm_vcpu['usage_percpu'] = vm_vcpu_usage_percpu = []
							for j in range(0,self.cpus):
								vm_vcpu_usage_percpu.append(
									# percent of cpu usage (cpuacct in nanoseconds)
									round(
										(int(vm['cpuacct'][i]['percpu'][j]) - int(vm_old['cpuacct'][i]['percpu'][j])) /
										((cur_time - self.last_time) * 10000000)
										, 2)
									)
							# using runqueue time:
							vm_vcpu['steal'] = round(
								(int(vm['proc']['sched'][i][1]) - int(vm_old['proc']['sched'][i][1])) /
								((cur_time - self.last_time) * 10000000)
								, 2)

			self.last_host_stats  = host_stats
			self.last_vms_stats   = vms_stats

		self.last_time = cur_time
		return data

	'''def getColumns(self):
		if self.columns == None:
			data = self.getData()
			if self.fields != None:
				fields = []
				for i in self.fields:
					if i not in data.keys(): raise Exception('field "{}" not found'.format(i))
					fields.append(i)
			else:
				fields = list(data.keys())
			l = []
			for i in range(0,len(fields)): l.append('{}')
			self.format_line = '; '.join(l)
			self.columns = fields
			self.header = '#' + self.format_line.format(*self.columns)
		return self.columns

	def getHeader(self):
		self.getColumns()
		return self.header'''

	def getLine(self):
		return json.dumps(self.getData())
		'''columns = self.getColumns()
		values = []
		for i in columns:
			values.append(data[i])
		return self.format_line.format(*values)'''

	def readFile(self, file):
		f = open(file, 'r')
		try:
			ret = ''.join(f.readlines())
		finally:
			f.close()
		return ret

if __name__ == '__main__':
	exit(main())
