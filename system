#!/usr/bin/env python3

import os
import sys
import time
import psutil
import argparse
import datetime
import collections
# libvirt module (imported only with --host)
libvirt = None

from util import max_round, LogFile

class Stat:
	# Class control
	args    = None
	is_host = False
	# System's information
	cpus = None
	libvirt_conn = None

	def __init__(self):
		global libvirt

		parser = argparse.ArgumentParser(
			description="Get system's performance information.")
		parser.add_argument('-i', '--interval', type=int,
			default=None,
			help='interval')
		parser.add_argument('--host',
			default=False, action='store_true',
			help='is a host machine (VMM)')
		parser.add_argument('-e', '--export-dir', type=str,
			default=None,
			help='directory used to export information to the guests (implies --host)')
		parser.add_argument('-f', '--format', type=str,
			default='json', choices=[ 'csv', 'json' ],
			help='output format')
		self.args = parser.parse_args()
		#print(args)

		if self.args.interval == None or self.args.interval <= 0:
			self.args.interval = 1

		if self.args.export_dir != None:
			self.args.host = True
			if not os.path.isdir(self.args.export_dir):
				raise Exception('parameter --export-dir="{}" is not a directory'.format(self.args.export_dir))

		if self.args.host:
			import libvirt as _libvirt
			libvirt = _libvirt

		self.cpus = psutil.cpu_count()
		self.is_host = self.args.host
		if self.is_host:
			self.libvirt_conn = libvirt.open('qemu:///system')

	def main(self):
		try:
			log = LogFile(sys.stdout, self.args.format)
			if self.args.export_dir != None:
				count = 0

				stats_d = collections.OrderedDict()
				stats_d[1] = stats_d[60] = stats_d[300] = stats_d[600] = self.collectStats()

				while True:
					time.sleep(1)
					curr = self.collectStats()
					count += 1

					processed_d = collections.OrderedDict()

					for i, stats in stats_d.items():
						if (count % i) == 0:
							processed_d[i] = self.processStats(stats_d[i], curr)
							stats_d[i] = curr

					if len(processed_d):
						log.write(processed_d[1])
						self.writePerVM(processed_d)
			else:
				last = self.collectStats()
				while True:
					time.sleep(self.args.interval)
					curr = self.collectStats()
					log.write(self.processStats(last, curr))
					last = curr
		except KeyboardInterrupt as e:
			return 0
		except Exception as e:
			sys.stderr.write('error: {}\n'.format(str(e)))
			return 1
		return 0

	_logFiles_ = dict()
	def writePerVM(self, processed_d):
		assert self.args.export_dir != None

		for interval, stats in processed_d.items():
			if stats == None: continue

			for vm_name, vm in stats['vm'].items():
				dir = '{}/{}'.format(self.args.export_dir, vm_name)
				if not os.path.isdir(dir):
					os.mkdir(dir)

				save = stats.copy()
				del save['vm']
				save['vm'] = stats['vm'][vm_name]

				file_name = '{}/stats-{}'.format(dir, interval)
				file_obj = self._logFiles_.get(file_name)
				if file_obj == None:
					self._logFiles_[file_name] = file_obj = LogFile(file_name, self.args.format)
				file_obj.write(save)

	def processStats(self, last_stats, current_stats):
		delta_time = current_stats['time'] - last_stats['time']

		ret = collections.OrderedDict()
		ret['time'] = datetime.datetime.now().strftime('%s')
		ret['cpu_count'] = self.cpus
		ret['cpu'] = []
		for i in range(0,self.cpus):
			data_cpu = collections.OrderedDict()
			ret['cpu'].append(data_cpu)

			last_times_i = last_stats['host']['times'][i]
			curr_times_i = current_stats['host']['times'][i]

			data_cpu['total']          = max_round((int(current_stats['host']['cpuacct'][i]) - int(last_stats['host']['cpuacct'][i]))/(delta_time * 10000000), 100, 2)
			data_cpu['user']           = max_round(100 * (curr_times_i.user - last_times_i.user) / delta_time, 100, 2)
			data_cpu['system']         = max_round(100 * (curr_times_i.system - last_times_i.system) / delta_time, 100, 2)
			data_cpu['nice']           = max_round(100 * (curr_times_i.nice - last_times_i.nice) / delta_time, 100, 2)
			data_cpu['idle']           = max_round(100 * (curr_times_i.idle - last_times_i.idle) / delta_time, 100, 2)
			data_cpu['iowait']         = max_round(100 * (curr_times_i.iowait - last_times_i.iowait) / delta_time, 100, 2)
			data_cpu['irq']            = max_round(100 * (curr_times_i.irq - last_times_i.irq) / delta_time, 100, 2)
			data_cpu['softirq']        = max_round(100 * (curr_times_i.softirq - last_times_i.softirq) / delta_time, 100, 2)
			data_cpu['steal']          = max_round(100 * (curr_times_i.steal - last_times_i.steal) / delta_time, 100, 2)
			data_cpu['guest']          = max_round(100 * (curr_times_i.guest - last_times_i.guest) / delta_time, 100, 2)
			data_cpu['guest_nice']     = max_round(100 * (curr_times_i.guest_nice - last_times_i.guest_nice) / delta_time, 100, 2)
			if current_stats['host']['freq'] != None:
				freq_i = current_stats['host']['freq'][i]
				data_cpu['freq_current'] = freq_i.current
				data_cpu['freq_min']     = freq_i.min
				data_cpu['freq_max']     = freq_i.max

		if self.is_host:
			ret['vm_totals'] = collections.OrderedDict()
			ret['vm'] = collections.OrderedDict()
			for vm_name, vm in current_stats['vms'].items():
				vm_old = last_stats['vms'].get(vm_name)

				ret['vm'][vm_name] = ret_vm = collections.OrderedDict()
				ret_vm['vcpu_count'] = vm['vcpu_count']
				ret_vm['vcpu'] = []

				for i in range(0,vm['vcpu_count']):
					vm_vcpu = collections.OrderedDict()
					ret_vm['vcpu'].append(vm_vcpu)

					vm_vcpu['map']   = vm['vcpus'][1][i]
					if vm_old != None:
						vm_vcpu['usage'] = max_round(
							(int(vm['cpuacct'][i]['total']) - int(vm_old['cpuacct'][i]['total'])) /
							(delta_time * 10000000)
							, 100, 2)
						vm_vcpu['usage_percpu'] = vm_vcpu_usage_percpu = []
						for j in range(0,self.cpus):
							vm_vcpu_usage_percpu.append(
								# percent of cpu usage (cpuacct in nanoseconds)
								max_round(
									(int(vm['cpuacct'][i]['percpu'][j]) - int(vm_old['cpuacct'][i]['percpu'][j])) /
									(delta_time * 10000000)
									, 100, 2)
								)
						# using runqueue time:
						vm_vcpu['steal'] = max_round(
							(int(vm['proc']['sched'][i][1]) - int(vm_old['proc']['sched'][i][1])) /
							(delta_time * 10000000)
							, 100, 2)
			ret['vm_totals']['vcpu_count'] = sum( [ ret['vm'][i]['vcpu_count'] for i in ret['vm'].keys() ] )
		return ret

	def collectStats(self):
		ret = collections.OrderedDict()
		ret['time']     = time.time()
		ret['host']     = host = collections.OrderedDict()
		host['times']   = psutil.cpu_times(percpu=True)
		host['cpuacct'] = self.readFile('/sys/fs/cgroup/cpu,cpuacct/cpuacct.usage_percpu').replace('\n', '').split(' ')[0:self.cpus]
		host['freq']    = psutil.cpu_freq(percpu=True)
		if len(host['freq']) == 0: host['freq'] = None

		if self.is_host:
			host['libvirt'] = host_libvirt = []
			for i in range(0,self.cpus):
				host_libvirt.append(self.libvirt_conn.getCPUStats(i))

			ret['vms'] = vms_stats = collections.OrderedDict()
			domains = self.libvirt_conn.listAllDomains()
			for dom in domains:
				if dom.isActive() == 0: continue
				name = dom.name()
				vcpus = dom.vcpus()
				vms_stats[name] = vm = collections.OrderedDict()
				vm['vcpu_count']     = len(vcpus[0])
				vm['vcpus']          = vcpus
				vm['cpuacct']        = self.getCpuacct(name, vm['vcpu_count'])
				vm['proc']           = self.getProc(name, vm['vcpu_count'])

		return ret

	__findCpuacctVM_cache = dict()
	def findCpuacctVM(self, vm_name):
		vm_path = self.__findCpuacctVM_cache.get(vm_name)
		if vm_path != None and os.path.isdir(vm_path):
			return vm_path

		basedir = '/sys/fs/cgroup/cpu,cpuacct/machine'
		dirs = [d for d in os.listdir(basedir) if os.path.isdir('{}/{}'.format(basedir,d)) and d.find('{}.libvirt-qemu'.format(vm_name)) != -1]
		if len(dirs) == 1:
			vm_path = '{}/{}'.format(basedir, dirs[0])
			self.__findCpuacctVM_cache['vm_name'] = vm_path
			return vm_path
		else:
			raise Exception("cpuacct directory of VM not found")

	def getCpuacct(self, vm_name=None, vcpus=None):
		ret = []
		vm_dir = self.findCpuacctVM(vm_name)

		for i in range(0,vcpus):
			ret_vcpu = collections.OrderedDict()
			ret.append(ret_vcpu)
			ret_vcpu['total'] = self.readFile('{}/vcpu{}/cpuacct.usage'.format(vm_dir, i)).replace('\n','')
			ret_vcpu['percpu'] = self.readFile('{}/vcpu{}/cpuacct.usage_percpu'.format(vm_dir, i)).replace('\n', '').split(' ')[0:self.cpus]

		return ret

	def getProc(self, vm_name, vcpus):
		vm_acct_dir = self.findCpuacctVM(vm_name)
		ret = collections.OrderedDict()
		#ret['stat']  = ret_stat = []  # not using /proc/<pid>/stat
		ret['sched'] = ret_sched = []
		for i in range(0,vcpus):
			# Getting vCPU thread ID:
			threadId = self.readFile('{}/vcpu{}/tasks'.format(vm_acct_dir, i)).replace('\n', '')
			#stat = self.readFile('/proc/{}/stat'.format(threadId)).replace('\n', '').split(' ')
			sched = self.readFile('/proc/{}/schedstat'.format(threadId)).replace('\n', '').split(' ')
			#ret_stat.append(stat)
			ret_sched.append(sched)
		return ret

	def readFile(self, file):
		f = open(file, 'r')
		assert f != None, 'unable to open the file "{}"'.format(file)
		try:
			ret = ''.join(f.readlines())
		finally:
			f.close()
		return ret

if __name__ == '__main__':
	exit(Stat().main())
